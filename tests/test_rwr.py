from utils.rwr import *
from utils.rwr import _geometric_mean, _arithemtic_mean, _sum_scores
import pytest
from utils.multiplex import *
from scipy import sparse

@pytest.fixture
def nodelist():
  return ['G1','G10','G2','G3','G4','G5','G6','G7','G8','G9']
  
@pytest.fixture
def bad_seed():
  return '-G1'
  
@pytest.fixture
def good_seed():
  return 'G1'

@pytest.fixture
def monoplex_flist():
  def gen_monoplex_flist(layer_idx):
    if layer_idx == 1:
      return 'tests/data/monoplex1.flist'
    elif layer_idx == 2:
      return 'tests/data/monoplex2.flist'
    elif layer_idx == 3:
      return 'tests/data/monoplex3.flist'
    elif layer_idx== 4:
      return 'tests/data/monoplex4.flist'
    elif layer_idx == 5:
      return 'tests/data/monoplex5.flist'
  
  return gen_monoplex_flist
    
@pytest.fixture
def multiplex_flist():
  return'tests/data/multiplex.flist'

@pytest.fixture()
def adj():
  def gen_adj(flist):
    mp = Multiplex(flist)
    return mp.adj_matrix()
  return gen_adj

@pytest.fixture
def expected_M_mono():
  def gen_expected_M_mono(layer_idx):
    M = sparse.lil_matrix((10,10))
    if layer_idx == 1:
      M[0,2] = 1/3
      M[0,3] = 1/4
      M[0,4] = 1/4
      M[0,5] = 1

      M[1,3] = 1/4
      M[1,4] = 1/4
      M[1,9] = 1

      M[2,0] = 1/4
      M[2,6] = 1/2
      M[2,8] = 1/2

      M[3,0] = 1/4
      M[3,1] = 1/3
      M[3,4] = 1/4
      M[3,7] = 1/2

      M[4,0] = 1/4
      M[4,1] = 1/3
      M[4,3] = 1/4
      M[4,7] = 1/2

      M[5,0] = 1/4

      M[6,2] = 1/3
      M[6,8] = 1/2

      M[7,3] = 1/4
      M[7,4] = 1/4

      M[8,2] = 1/3
      M[8,6] = 1/2

      M[9,1] = 1/3
    elif layer_idx == 2:
      M[0,2] = 1/6  

      M[1,3] = 1/3

      M[2,0] = 1
      M[2,4] = 1/3
      M[2,5] = 1/4
      M[2,6] = 1/2
      M[2,7] = 1/2
      M[2,8] = 1

      M[3,1] = 1
      M[3,4] = 1/3
      M[3,5] = 1/4

      M[4,2] = 1/6
      M[4,3] = 1/3
      M[4,5] = 1/4

      M[5,2] = 1/6
      M[5,3] = 1/3
      M[5,4] = 1/3
      M[5,9] = 1

      M[6,2] = 1/6
      M[6,7] = 1/2

      M[7,2] = 1/6
      M[7,6] = 1/2

      M[8,2] = 1/6

      M[9,5] = 1/4
    elif layer_idx == 3:
      M[0,2] = 1/4
      M[0,7] = 1/7

      M[1,7] = 1/7

      M[2,0] = 1/2
      M[2,3] = 1/4
      M[2,4] = 1/4
      M[2,6] = 1/3

      M[3,2] = 1/4
      M[3,4] = 1/4
      M[3,5] = 1/2
      M[3,6] = 1/3

      M[4,2] = 1/4
      M[4,3] = 1/4
      M[4,7] = 1/7
      M[4,8] = 1/2

      M[5,3] = 1/4
      M[5,7] = 1/7

      M[6,2] = 1/4
      M[6,3] = 1/4
      M[6,7] = 1/7

      M[7,0] = 1/2
      M[7,1] = 1
      M[7,4] = 1/4
      M[7,5] = 1/2
      M[7,6] = 1/3
      M[7,8] = 1/2
      M[7,9] = 1

      M[8,4] = 1/4
      M[8,7] = 1/7

      M[9,7] = 1/7
    elif layer_idx == 4:
      M[0,2] = 1/3
      M[0,4] = 1/2
      M[0,5] = 1
      M[0,7] = 1/3

      M[1,9] = 1/2

      M[2,0] = 1/4
      M[2,3] = 1/4
      M[2,9] = 1/2

      M[3,2] = 1/3
      M[3,4] = 1/2
      M[3,6] = 1/3
      M[3,8] = 1/3

      M[4,0] = 1/4
      M[4,3] = 1/4

      M[5,0] = 1/4

      M[6,3] = 1/4
      M[6,7] = 1/3
      M[6,8] = 1/3

      M[7,0] = 1/4
      M[7,6] = 1/3
      M[7,8] = 1/3

      M[8,3] = 1/4
      M[8,6] = 1/3
      M[8,7] = 1/3

      M[9,1] = 1
      M[9,2] = 1/3
    elif layer_idx == 5:
      M[0,2] = 1/3
      M[0,9] = 1/3

      M[1,3] = 1/2

      M[2,0] = 1/2
      M[2,4] = 1/2
      M[2,7] = 1/3

      M[3,1] = 1
      M[3,4] = 1/2

      M[4,2] = 1/3
      M[4,3] = 1/2

      M[5,6] = 1/3
      M[5,7] = 1/3

      M[6,5] = 1/2
      M[6,8] = 1/3
      M[6,9] = 1/3

      M[7,2] = 1/3
      M[7,5] = 1/2
      M[7,8] = 1/3

      M[8,6] = 1/3
      M[8,7] = 1/3
      M[8,9] = 1/3

      M[9,0] = 1/2
      M[9,6] = 1/3
      M[9,8] = 1/3

    return M.tocsr()

  return gen_expected_M_mono

@pytest.fixture
def expected_init_prob():

  def gen_expected_init_prob(seed, L):
    prob = np.zeros(10 * L)

    if seed == 'G1':
      idx = 0
    elif seed == 'G10':
      idx = 1
    elif seed == 'G2':
      idx = 2
    elif seed == 'G3':
      idx = 3
    elif seed == 'G4':
      idx = 4
    elif seed == 'G5':
      idx = 5
    elif seed == 'G6':
      idx = 6
    elif seed == 'G7':
      idx = 7
    elif seed == 'G8':
      idx = 8
    elif seed == 'G9':
      idx = 9

    for l in range(L):
      prob[l*10 + idx] = 1/L

    return prob
  
  return gen_expected_init_prob

@pytest.fixture
def random_prob_vector():
  def gen_random_prob_vector(len):
    prob = np.random.random(len)
    prob = prob / sum(prob)
    return prob

  return gen_random_prob_vector

@pytest.fixture
def expected_rwr_mono():
  def gen_expected_rwr_mono(seed, layer_idx):
    if layer_idx == 1:
      if seed == 'G1':
        return [0.73141965,0.009563264,0.056863418,0.061842438,0.061842438,0.054856474,0.006689814,0.009276366,0.006689814,0.000956326]
      elif seed == 'G10':
        return [0.012751018,0.734396896,0.000991314,0.082433259,0.082433259,0.000956326,0.000116625,0.012364989,0.000116625,0.07343969]
      elif seed == 'G2':
        return [0.07581789,0.000991314,0.731504135,0.006410497,0.006410497,0.005686342,0.08605931,0.000961574,0.08605931,0.000099131]
      elif seed =='G3':
        return [0.061842438,0.061824944,0.004807872,0.7253827,0.074219909,0.004638183,0.000565632,0.059970196,0.000565632,0.006182494]
      elif seed == 'G4':
        return [0.061842438,0.061824944,0.004807872,0.074219909,0.7253827,0.004638183,0.000565632,0.059970196,0.000565632,0.006182494]
      elif seed == 'G5':
        return [0.219425895,0.002868979,0.017059025,0.018552731,0.018552731,0.716456942,0.002006944,0.00278291,0.002006944,0.000286898]
      elif seed == 'G6':
        return [0.013379628,0.000174938,0.129088965,0.001131264,0.001131264,0.001003472,0.731299469,0.00016969,0.122603817,0.000017494]
      elif seed == 'G7':
        return [0.018552731,0.018547483,0.001442362,0.119940391,0.119940391,0.001391455,0.00016969,0.717991059,0.00016969,0.001854748]
      elif seed == 'G8':
        return [0.013379628,0.000174938,0.129088965,0.001131264,0.001131264,0.001003472,0.122603817,0.00016969,0.731299469,0.000017494]
      elif seed == 'G9':
        return [0.003825305,0.220319069,0.000297394,0.024729978,0.024729978,0.000286898,0.000034988,0.003709497,0.000034988,0.722031907]
    elif layer_idx == 2:
      if seed == 'G1':
        return [0.711140843,0.000226834,0.222816858,0.00226834,0.012334515,0.01289118,0.013106874,0.013106874,0.011140843,0.000966839]
      elif seed == 'G10':
        return [0.000226834,0.722094899,0.004536681,0.220948991,0.024220231,0.025313306,0.000266864,0.000266864,0.000226834,0.001898498]
      elif seed == 'G2':
        return [0.037136143,0.000756113,0.74272286,0.007561134,0.041115051,0.0429706,0.04368958,0.04368958,0.037136143,0.003222795]
      elif seed =='G3':
        return [0.000756113,0.073649664,0.015122268,0.736496636,0.080734103,0.084377685,0.000889545,0.000889545,0.000756113,0.006328326]
      elif seed == 'G4':
        return [0.004111505,0.00807341,0.082230103,0.080734103,0.718633633,0.085982894,0.004837065,0.004837065,0.004111505,0.006448717]
      elif seed == 'G5':
        return [0.003222795,0.006328326,0.0644559,0.063283264,0.06448717,0.732480653,0.003791524,0.003791524,0.003222795,0.054936049]
      elif seed == 'G6':
        return [0.006553437,0.000133432,0.13106874,0.001334318,0.007255597,0.007583047,0.723822458,0.115126806,0.006553437,0.000568729]
      elif seed == 'G7':
        return [0.006553437,0.000133432,0.13106874,0.001334318,0.007255597,0.007583047,0.115126806,0.723822458,0.006553437,0.000568729]
      elif seed == 'G8':
        return [0.011140843,0.000226834,0.222816858,0.00226834,0.012334515,0.01289118,0.013106874,0.013106874,0.711140843,0.000966839]
      elif seed == 'G9':
        return [0.000966839,0.001898498,0.01933677,0.018984979,0.019346151,0.219744196,0.001137457,0.001137457,0.000966839,0.716480815]
    elif layer_idx == 3:
      if seed == 'G1':
        return [0.713172864,0.004894569,0.110377266,0.011669863,0.014950482,0.005769809,0.014048104,0.114206617,0.006015855,0.004894569]
      elif seed == 'G10':
        return [0.009789139,0.709517856,0.003617107,0.003617107,0.011618812,0.009789139,0.010060422,0.222083298,0.010389266,0.009517856]
      elif seed == 'G2':
        return [0.055188633,0.000904277,0.723791417,0.065742063,0.06094051,0.005834931,0.060119288,0.02109979,0.005474815,0.000904277]
      elif seed =='G3':
        return [0.005834931,0.000904277,0.065742063,0.723791417,0.06094051,0.055188633,0.060119288,0.02109979,0.005474815,0.000904277]
      elif seed == 'G4':
        return [0.007475241,0.002904703,0.06094051,0.06094051,0.720588101,0.007475241,0.012045779,0.067776401,0.05694881,0.002904703]
      elif seed == 'G5':
        return [0.005769809,0.004894569,0.011669863,0.110377266,0.014950482,0.713172864,0.014048104,0.114206617,0.006015855,0.004894569]
      elif seed == 'G6':
        return [0.009365403,0.003353474,0.08015905,0.08015905,0.016061039,0.009365403,0.715377331,0.078247724,0.004558052,0.003353474]
      elif seed == 'G7':
        return [0.032630462,0.031726185,0.012057023,0.012057023,0.038729372,0.032630462,0.033534739,0.74027766,0.034630888,0.031726185]
      elif seed == 'G8':
        return [0.006015855,0.005194633,0.01094963,0.01094963,0.113897621,0.006015855,0.006837078,0.121208109,0.713736955,0.005194633]
      elif seed == 'G9':
        return [0.009789139,0.009517856,0.003617107,0.003617107,0.011618812,0.009789139,0.010060422,0.222083298,0.010389266,0.709517856]
    elif layer_idx == 4:
      if seed == 'G1':
        return [0.736438385,0.000900185,0.057311771,0.015716096,0.056411586,0.055232879,0.007615903,0.05675606,0.007615903,0.006001233]
      elif seed == 'G10':
        return [0.00360074,0.7335192,0.034055711,0.003552744,0.000536511,0.000270055,0.000333479,0.000336751,0.000333479,0.223461331]
      elif seed == 'G2':
        return [0.076415695,0.011351904,0.722737864,0.075397113,0.011385961,0.005731177,0.00707716,0.007146609,0.00707716,0.075679357]
      elif seed =='G3':
        return [0.015716096,0.000888186,0.056547834,0.726412552,0.055659649,0.001178707,0.062044105,0.013587528,0.062044105,0.005921239]
      elif seed == 'G4':
        return [0.112823172,0.000268256,0.017078941,0.111319297,0.716810685,0.008461738,0.010449001,0.010551538,0.010449001,0.001788371]
      elif seed == 'G5':
        return [0.220931515,0.000270055,0.017193531,0.004714829,0.016923476,0.716569864,0.002284771,0.017026818,0.002284771,0.00180037]
      elif seed == 'G6':
        return [0.010154538,0.00011116,0.00707716,0.082725473,0.006966001,0.00076159,0.723046102,0.081734447,0.086682465,0.000741064]
      elif seed == 'G7':
        return [0.075674746,0.00011225,0.007146609,0.018116704,0.007034359,0.005675606,0.081734447,0.722022495,0.081734447,0.000748336]
      elif seed == 'G8':
        return [0.010154538,0.00011116,0.00707716,0.082725473,0.006966001,0.00076159,0.086682465,0.081734447,0.723046102,0.000741064]
      elif seed == 'G9':
        return [0.012002465,0.111730665,0.113519036,0.011842478,0.001788371,0.000900185,0.001111596,0.001122504,0.001111596,0.744871103]
    elif layer_idx == 5:
      if seed == 'G1':
        return [0.722232107,0.000268634,0.11133379,0.001790892,0.011402013,0.002573879,0.012852071,0.012886722,0.013672608,0.110987284]
      elif seed == 'G10':
        return [0.000537268,0.733792908,0.005283112,0.225286055,0.03432122,0.000056743,0.000024038,0.000543393,0.000065699,0.000089564]
      elif seed == 'G2':
        return [0.074222527,0.001761037,0.729852186,0.01174025,0.074746256,0.007838946,0.003320776,0.075068686,0.009076254,0.012373082]
      elif seed =='G3':
        return [0.001790892,0.112643028,0.017610374,0.750953518,0.114404065,0.000189143,0.000080126,0.001811309,0.000218998,0.000298546]
      elif seed == 'G4':
        return [0.011402013,0.01716061,0.112119384,0.114404065,0.728372548,0.001204213,0.000510135,0.011531999,0.001394288,0.001900744]
      elif seed == 'G5':
        return [0.002573879,0.000028372,0.011758419,0.000189143,0.001204213,0.72240563,0.112139249,0.111917053,0.023803668,0.013980374]
      elif seed == 'G6':
        return [0.008568047,0.000008013,0.003320776,0.000053417,0.00034009,0.074759499,0.727749442,0.019845549,0.082995469,0.082359698]
      elif seed == 'G7':
        return [0.008591148,0.000181131,0.075068686,0.001207539,0.007687999,0.074611369,0.019845549,0.726268139,0.075695648,0.010842792]
      elif seed == 'G8':
        return [0.009115072,0.0000219,0.009076254,0.000145999,0.000929525,0.015869112,0.082995469,0.075695648,0.724076558,0.082074463]
      elif seed == 'G9':
        return [0.073991523,0.000029855,0.012373082,0.000199031,0.001267163,0.009320249,0.082359698,0.010842792,0.082074463,0.727542145]
  return gen_expected_rwr_mono

@pytest.fixture
def expected_rwr_multi():
  def gen_expected_rwr_multi(seed, mean_type):
    if mean_type is None:
      if seed == 'G1':
        return [0.1595957784249965,0.0013989735281333706,0.010824033556006725,0.010579836018992785,0.0108482930112701,0.010051183179066229,0.0010322618015052509,0.0017070068863228186,0.001030488750115481,0.0004926356046362686,0.1536824830196067,9.926370500574172e-05,0.024757337894800065,0.000498198596520776,0.0017185236049795018,0.0021249237398964444,0.0013327127187832868,0.0016178481519008472,0.0011587961817512574,0.0005143921444122939,0.156126128917003,0.0006665045857011474,0.016980957760408606,0.001662483091585314,0.0023229332391964475,0.0015394947673615577,0.001852957756276216,0.01669006154550281,0.0008843664137075745,0.0009947602253351302,0.16006682630551242,0.00018085341286412505,0.010897750509144714,0.002184951884883282,0.010009720514792375,0.010078424501805166,0.0010886268684129554,0.01004285756777504,0.0010868031583717553,0.0012201421720203706,0.15693447835474572,0.00010379019391122472,0.016944395432828135,0.0004206112675847179,0.0017929245086169222,0.00108537316967904,0.0015433535879035229,0.0019253351632767428,0.0015743187415208778,0.016032843863570574]
      elif seed == 'G10':
        return [0.001814481728512798,0.16828057713196778,0.00018837208533832825,0.01494242848276188,0.013977653777181102,0.00017829940766867416,4.765389233914736e-05,0.0019934227110945443,5.345808439517513e-05,0.013415828856821833,8.194997743795079e-05,0.1634896023506593,0.00045271106738099944,0.02576271671691899,0.00241078870660828,0.002381115449438861,7.95082653860908e-05,0.0003272254322532091,5.330423684668866e-05,0.0013886709199216227,0.0010141751074907181,0.16254043818169603,0.00044103927527701923,0.0016819837165664496,0.0015183942753693388,0.0010970553015868115,0.0010838761583315453,0.025265224778434053,0.001048244711534951,0.0021641687531609717,0.00034917725902399875,0.16408267224244544,0.0026898147850702705,0.001647674095987441,0.0004695897475444441,9.355890796965412e-05,0.00016396770728811065,0.0003475306811932961,0.00016993773336550555,0.02547513765772617,0.00018955252615366358,0.16410056349378013,0.0003995677663708048,0.025660759388933283,0.0028854262765471562,0.00011115722788570645,0.00014908813785127582,0.000355170923457065,0.00016924979431274547,0.001316034106712643]
      elif seed == 'G2':
        return [0.012860508433111177,0.00030553886405961113,0.15311091221247,0.001372153089688742,0.0016022521520602316,0.0009778060325192884,0.013253718437384586,0.0006566698769612003,0.013174740605396106,0.00039919627089896466,0.007632919605564045,0.00017698200449672787,0.15573113888560888,0.0014759315492234289,0.007779932334215035,0.007619594846614268,0.0080353667269348,0.007777903072807077,0.007103239061967737,0.0008177603928391683,0.010313255030225107,0.0001885616638627945,0.153390253654399,0.011006896132868033,0.010652666000372285,0.0010009422278517712,0.01057257096520084,0.0032722336698758634,0.0014217439829743777,0.0004953826306371259,0.01295291843385266,0.0011987106684094306,0.15238681085588732,0.01214807819360242,0.0021363937960985017,0.0009831502264619194,0.0017156959982062426,0.0014950274758291026,0.001634461656792421,0.011707383540424568,0.012547806390180391,0.00022761527895346506,0.15305500676483685,0.0016322688946281193,0.01202545974338515,0.0011995966033682894,0.0011539619107549946,0.012002614943039462,0.0017860866203853847,0.0018321815918149447]
      elif seed =='G3':
        return [0.010380636452049194,0.01137425258299319,0.0011289983424278885,0.1546440842441814,0.012862826688340472,0.0010999393081059972,0.0005343893998912153,0.010140684591925948,0.00037502585530388644,0.0009230262831328653,0.0003276297057970063,0.012515721496876157,0.002418505824628967,0.1544854644469955,0.013513066871988996,0.013153805834032428,0.0005642726263583707,0.0004915751817471581,0.00033728957758207825,0.0008614931800866048,0.00099577639386432,0.001463077074337705,0.011085233126093929,0.15446423311798818,0.01127197655324522,0.009663896661502185,0.010284987382059487,0.003181099891478172,0.001016485391489495,0.00021577067003361545,0.0022236978890599604,0.0014472636949369995,0.009772126425155576,0.1547109951293515,0.01044217563187027,0.0006282127402002993,0.010432176374727757,0.001992384411387743,0.010268259586044782,0.0010288486451675504,0.0004008012550268079,0.01618417724489387,0.002122677411503591,0.15392432672772205,0.016428079921823158,0.0005855455664309313,0.0005151095572819665,0.0005760285942019788,0.0003371562787101485,0.00020473215796538074]
      elif seed == 'G4':
        return [0.010752998308223011,0.010438705673767814,0.0013701934451295656,0.012925439127074074,0.15616726762394142,0.0009407302197174206,0.0002276396527232718,0.010340533881988846,0.0004419686678575509,0.0008490039317459912,0.0010605970323111517,0.0013350414083507435,0.013428626968313914,0.013647827346085478,0.15477717317996292,0.013467191093213557,0.0007508263216771329,0.001077151258339531,0.0008703633694813124,0.0008732242105302532,0.0015595693596669926,0.0007566543262947988,0.010836521723181544,0.011383196117306218,0.1556781899950376,0.0014022730969074258,0.001809141392570116,0.011293612086512032,0.009845552453578736,0.0005026015479059984,0.016130370437730433,0.00038168984971846676,0.0026436953793541797,0.016786896497888813,0.15341185374929706,0.001251710776598277,0.0013037001601849288,0.0016033335229233426,0.0015241528613813974,0.00034484808071441554,0.0017137873217180667,0.0019477525024708022,0.016109730914359462,0.016592748097711014,0.15428255483574269,0.0004618589103984292,0.0001888982337114998,0.0017121375219899507,0.00048452754780472124,0.0003139379789055816]
      elif seed == 'G5':
        return [0.024548270028798922,0.0003951537325054474,0.0017659481902142578,0.0021880852960863063,0.0020136470254436666,0.15786392122081505,0.0005461784290516263,0.0007920617797081085,0.00028702421189114903,0.0004956146311639716,0.001286764388081881,0.0008754358487675509,0.01126211822512808,0.01109530615141898,0.011245089641375416,0.16350495327701825,0.0009682857781824038,0.0011114635835652053,0.0005684800675637867,0.009922757442622315,0.0015574666613540407,0.0006946360157034209,0.0016579891700653595,0.0166489779727251,0.002127690261033161,0.15995554036898268,0.0021022532693230943,0.017188483582139105,0.0008579174733281749,0.001088319792505393,0.0246355767371934,0.00013353283858168628,0.0018033093796467811,0.0008953330732210299,0.0018172510174828535,0.15786897028384864,0.0006228854469918452,0.0020724759851107437,0.0003563268236604529,0.000624235881149599,0.0010963123992132977,0.0001285979457568368,0.0016204951356559682,0.0005730363820283222,0.0004972375373070236,0.1607790330046948,0.01651874123866086,0.016649082277768575,0.0026940366693440684,0.0019976964261212717]
      elif seed == 'G6':
        return [0.0015884066286405644,0.00012983981634206432,0.017876879540930778,0.0006313497986489224,0.0003158126777613308,0.0004761337368000603,0.15577045638568254,0.0009125722898542776,0.01755452073204938,0.00030715359690986616,0.0008954665390872703,7.015108285859074e-05,0.018336023521825968,0.0005788029564620182,0.0009775270825754336,0.0013374440867231472,0.15515159275591003,0.016760532396309504,0.0017941221437656268,0.00037511375094358775,0.0014037702892151119,0.00050666925073757,0.01332249619105342,0.01301030918316156,0.0022949977471927487,0.0016347324151498163,0.15572492358081813,0.013234608524571865,0.0016678730040607418,0.0007761269317733395,0.0014265355749920508,7.018179682673645e-05,0.001677603359328858,0.013262587994280373,0.0009441138388056394,0.0004667725198113887,0.1565206378780449,0.013526255204125833,0.014355675491375272,0.0004344208696957275,0.0011727427597074732,7.131873495836212e-05,0.0011374681800611932,0.00044621660880046977,0.0002110254085406514,0.012095815921365003,0.15684502657828345,0.0031486662828561123,0.013790069565370315,0.012980456794954904]
      elif seed == 'G7':
        return [0.002606421286370689,0.0023486782370165113,0.0008229845431277224,0.016751148288158595,0.016853192729108853,0.0006902599155365457,0.0010023898729981883,0.15314900754612823,0.0008716892859509436,0.00045601435455157324,0.00118667167789494,0.00033838713575406174,0.017900809476910393,0.0005736441759879888,0.0013289513786229645,0.0015030588580519923,0.016585938971166662,0.15354853045888228,0.001444526495133612,0.0003731542715200827,0.006368135121143355,0.006015331251184139,0.002174855834618722,0.002042514431649462,0.007223493917446149,0.006453817642364131,0.006934431311089865,0.1582094088825886,0.006924664544090139,0.006004642754656608,0.012313144699709948,0.000339532551642757,0.001403677763513664,0.0025395674544191915,0.0013118512718410323,0.0012516125953336555,0.01338330382695263,0.1547952627378326,0.013248868937374758,0.0004421168189849192,0.0014598904364419066,0.0003471657020763148,0.012184275559021898,0.0005213107506423683,0.0013848161627141031,0.012121913680234339,0.003087525067223951,0.15511517010155856,0.012481269732103752,0.001580969500673548]
      elif seed == 'G8':
        return [0.0015650610732286395,0.00014011251058839496,0.01812521189140013,0.000452714014872326,0.0005282505028272157,0.0001937730353037227,0.017876177890210256,0.0007710990822189202,0.15888119299221606,0.00031987005344892306,0.00114645952712613,6.624912029577538e-05,0.02445868803587348,0.0004377629242259223,0.001461300154441119,0.0013358069118470514,0.0022629395710534006,0.0019571142780387698,0.15494404204530832,0.00038699292308181927,0.0009087127788099648,0.0006807352137446329,0.001997446428349102,0.0015742520921820556,0.016705850637504335,0.0008506853914642828,0.0019241576407565185,0.017876307753883238,0.15744285532996005,0.000955873044907571,0.0014078613831145146,7.71609780518546e-05,0.0015952019358943723,0.013351135957453679,0.0011834431734527664,0.00018468196956442472,0.014597340729977914,0.013627603651901434,0.15963107054923645,0.000441532715949768,0.0012367353180643636,6.3164963919438e-05,0.0017942417189438639,0.00029632407985841853,0.0004796975090653098,0.00206558236044366,0.013990192673337693,0.012810954757280538,0.1597135347184983,0.01322484400682309]
      elif seed == 'G9':
        return [0.0007726804985493083,0.025261821862837004,0.0005044728459603296,0.002198823494692407,0.0021926540327631473,0.0005117344385777114,0.0003760795556679313,0.0005467830999471252,0.000387122108348142,0.1611607547830669,0.0004821780634091595,0.0013873327634807003,0.0021950440299561237,0.001886381197451641,0.0017760646063762345,0.024597920990499223,0.00043453318928099975,0.00042389332598735674,0.0004004145143468527,0.1607571293557331,0.0013525672591079463,0.0021545095041686363,0.0007128426088175475,0.00045185557333458275,0.001216922534686107,0.0014137555542503865,0.0012920149409210663,0.02499798555430608,0.0012993137108085735,0.16023814063190991,0.0017861218966754334,0.017156081728689182,0.016771821530215374,0.0014386585517024908,0.00028431753950453417,0.0005703430968608424,0.00045664922142514384,0.00046476620819606014,0.0004680072755979893,0.16501555641304144,0.012636341239917312,0.0012812757606545076,0.0017658255636411669,0.0003144444935947949,0.00025543416541070333,0.0015869215484703195,0.013646992024858008,0.0015800871341815593,0.013621608941132093,0.16551501903698876]
    elif mean_type == 'Sum':
      if seed == 'G1':
        return [0.786405695,0.002449385,0.080404475,0.015346081,0.026692395,0.024879399,0.006849913,0.031983109,0.005734773,0.019254774]
      elif seed == 'G10':
        return [0.003449337,0.822493853,0.004171505,0.069695562,0.021261853,0.003861186,0.001524094,0.028288575,0.001494195,0.04375984]
      elif seed == 'G2':
        return [0.056307408,0.002097408,0.767674122,0.027635328,0.034196704,0.01178109,0.034731314,0.025204449,0.025120272,0.015251904]
      elif seed == 'G3':
        return [0.014328542,0.042984492,0.026527541,0.772229104,0.064518126,0.0251314,0.022330935,0.016381773,0.012334217,0.003233871]
      elif seed == 'G4':
        return [0.031217322,0.014859844,0.044388768,0.071336107,0.774317039,0.017523764,0.004280206,0.026026768,0.013166565,0.002883616]
      elif seed == 'G5':
        return [0.05312439,0.002227356,0.01810986,0.031400739,0.017700915,0.799972418,0.020758344,0.037813567,0.004763785,0.014128624]
      elif seed == 'G6':
        return [0.006486922,0.000848161,0.052350471,0.027929267,0.004743477,0.016010899,0.780012637,0.047582635,0.049162261,0.014873272]
      elif seed == 'G7':
        return [0.023934263,0.009389095,0.034486603,0.022428185,0.028102305,0.022020663,0.040993589,0.77481738,0.034971019,0.008856898]
      elif seed == 'G8':
        return [0.00626483,0.001027423,0.04797079,0.016112189,0.020358542,0.00463053,0.050650809,0.04704308,0.790612696,0.015329113]
      elif seed == 'G9':
        return [0.017029889,0.047241022,0.021950007,0.006290163,0.005725393,0.028680676,0.016206269,0.028013515,0.016176467,0.8126866]
    elif mean_type == 'Geometric':
      if seed == 'G1':
        return [0.1572636,0.000280529,0.015306773,0.001517722,0.003785363,0.003244756,0.001337665,0.003890442,0.001125603,0.001375916]
      elif seed == 'G10':
        return [0.000397959,0.164487034,0.000526412,0.007717472,0.002334432,0.000344379,0.000158613,0.001152604,0.000153749,0.004228422]
      elif seed == 'G2':
        return [0.011047296,0.000308229,0.153530569,0.003381322,0.005088498,0.00154472,0.004673381,0.00312893,0.00329503,0.001282438]
      elif seed == 'G3':
        return [0.001247254,0.005465839,0.003627201,0.154445572,0.012743644,0.002199115,0.001755355,0.00178653,0.000850548,0.000514753]
      elif seed == 'G4':
        return [0.003454118,0.001509582,0.006106616,0.014110174,0.154860297,0.001593374,0.000597493,0.003218422,0.001228389,0.000526194]
      elif seed == 'G5':
        return [0.004213928,0.000333514,0.002493329,0.002906375,0.002126996,0.159980797,0.001628102,0.003495862,0.00066937,0.001461781]
      elif seed == 'G6':
        return [0.001272795,0.000118228,0.006083622,0.001949182,0.000675989,0.001425077,0.156001353,0.006125113,0.006359146,0.000872028]
      elif seed == 'G7':
        return [0.003234561,0.000891627,0.003529819,0.001918411,0.003116327,0.002519819,0.005439917,0.154953296,0.004283361,0.000934895]
      elif seed == 'G8':
        return [0.001232057,0.000125228,0.004794878,0.001043,0.001489061,0.000609333,0.006922407,0.005427515,0.158112387,0.000928723]
      elif seed == 'G9':
        return [0.001626222,0.004405659,0.001878281,0.00096753,0.000807895,0.001743419,0.001056423,0.001335914,0.001051261,0.162521771]
    elif mean_type == 'Arithmetic':
      if seed == 'G1':
        return [0.157281139,0.000489877,0.016080895,0.003069216,0.005338479,0.00497588,0.001369983,0.006396622,0.001146955,0.003850955]
      elif seed == 'G10':
        return [0.000689867,0.164498771,0.000834301,0.013939112,0.004252371,0.000772237,0.000304819,0.005657715,0.000298839,0.008751968]
      elif seed == 'G2':
        return [0.011261482,0.000419482,0.153534824,0.005527066,0.006839341,0.002356218,0.006946263,0.00504089,0.005024054,0.003050381]
      elif seed == 'G3':
        return [0.002865708,0.008596898,0.005305508,0.154445821,0.012903625,0.00502628,0.004466187,0.003276355,0.002466843,0.000646774]
      elif seed == 'G4':
        return [0.006243464,0.002971969,0.008877754,0.014267221,0.154863408,0.003504753,0.000856041,0.005205354,0.002633313,0.000576723]
      elif seed == 'G5':
        return [0.010624878,0.000445471,0.003621972,0.006280148,0.003540183,0.159994484,0.004151669,0.007562713,0.000952757,0.002825725]
      elif seed == 'G6':
        return [0.001297384,0.000169632,0.010470094,0.005585853,0.000948695,0.00320218,0.156002527,0.009516527,0.009832452,0.002974654]
      elif seed == 'G7':
        return [0.004786853,0.001877819,0.006897321,0.004485637,0.005620461,0.004404133,0.008198718,0.154963476,0.006994204,0.00177138]
      elif seed == 'G8':
        return [0.001252966,0.000205485,0.009594158,0.003222438,0.004071708,0.000926106,0.010130162,0.009408616,0.158122539,0.003065823]
      elif seed == 'G9':
        return [0.003405978,0.009448204,0.004390001,0.001258033,0.001145079,0.005736135,0.003241254,0.005602703,0.003235293,0.16253732]
  return gen_expected_rwr_multi

class TestRWR:
  @pytest.fixture
  def M_multi(self, multiplex_flist):
    mp = Multiplex(multiplex_flist)
    adj = mp.adj_matrix()
    return column_norm(adj)
  
  @pytest.mark.parametrize("layer_idx", [1,2,3,4,5])
  def test_column_norm_mono(self, layer_idx, monoplex_flist, adj, expected_M_mono):
    flist = monoplex_flist(layer_idx)
    adj_mat = adj(flist)
    M = column_norm(adj_mat)
    expected_M = expected_M_mono(layer_idx)
    assert np.all(M.indptr == expected_M.indptr)
    assert np.all(M.indices == expected_M.indices)
    assert np.allclose(M.data, expected_M.data)

  def test_init_prob_non_pos_L(self, good_seed, nodelist):
    with pytest.raises(ValueError):
      get_init_prob(good_seed, nodelist, 0)

  def test_init_prob_non_int_L(self, good_seed, nodelist):
    with pytest.raises(ValueError):
      get_init_prob(good_seed, nodelist, 1.5)

  def test_init_prob_bad_seed(self, bad_seed, nodelist):
    with pytest.raises(ValueError):
      get_init_prob(bad_seed, nodelist, 1)

  @pytest.mark.parametrize("seed", ["G1","G2","G3","G4","G5","G6","G7","G8","G9","G10"])
  @pytest.mark.parametrize("L", [1,2,3,4,5])
  def test_init_prob(self, seed, L, nodelist, expected_init_prob):
    prob = get_init_prob(seed, nodelist, L)
    expected_prob = expected_init_prob(seed, L)

    assert np.all(prob == expected_prob)

  @pytest.mark.parametrize("r", [-0.1, 2, 6, -3])
  def test_rwr_bad_r(self, expected_M_mono, expected_init_prob, r):
    M = expected_M_mono(1)
    prob = expected_init_prob("G1", 1)
    with pytest.raises(ValueError):
      random_walk_restart(M=M, p0=prob, r=r)

  @pytest.mark.parametrize("threshold", [0, -1])
  def test_rwr_low_threshold(self, expected_M_mono, expected_init_prob, threshold):
    M = expected_M_mono(2)
    prob = expected_init_prob("G1", 1)
    with pytest.raises(ValueError):
      random_walk_restart(M=M, p0=prob, threshold=threshold)

  @pytest.mark.parametrize("L,tau", [(1, [1,1]), (1, [1/3, 1/3, 1/3]), (2, [1]), (4, [1/2, 1/2])])
  def test_rwr_tau_list_bad_len(self, expected_M_mono, expected_init_prob, L, tau):
    M = expected_M_mono(3)
    prob = expected_init_prob("G1", 1)
    with pytest.raises(ValueError):
      random_walk_restart(M=M, p0=prob, tau=tau, L=L)
  
  @pytest.mark.parametrize("L,tau", [(1, [0.1]), (2, [1/3, 1/3]), (3, [1/2, 1/2, 1/2]), (4, [1/2, 1/2, 1/3, 1/4]), (2, [1,2])])
  def test_rwr_tau_list_bad_sum(self, expected_M_mono, expected_init_prob, L, tau):
    M = expected_M_mono(3)
    prob = expected_init_prob("G1", 1)
    with pytest.raises(ValueError):
      random_walk_restart(M=expected_M_mono, p0=prob, tau=tau, L=L)

  @pytest.mark.parametrize("tau", [int(1), 2.0, np.ones(1)])
  def test_rwr_tau_bad_type(self, expected_M_mono, expected_init_prob, tau):
    M = expected_M_mono(3)
    prob = expected_init_prob("G1", 1)
    with pytest.raises(TypeError):
      random_walk_restart(M=expected_M_mono, p0=prob, tau=tau, L=1)
  
  @pytest.mark.parametrize("layer_idx", [1,2,3,4,5])
  @pytest.mark.parametrize("seed", ['G1','G10','G2','G3','G4','G5','G6','G7','G8','G9'])
  def test_rwr_mono(self, layer_idx, seed, monoplex_flist, adj, expected_init_prob, expected_rwr_mono):
    flist = monoplex_flist(layer_idx)
    adj_matrix = adj(flist)
    M = column_norm(adj_matrix)
    L = 1
    r = 0.7
    p0 = expected_init_prob(seed, L)
    p = random_walk_restart(M, p0, L=L, r=r)

    expected_p = expected_rwr_mono(seed, layer_idx)

    assert np.allclose(p, expected_p)

  # @pytest.mark.parametrize("seed", ['G1','G10','G2','G3','G4','G5','G6','G7','G8','G9'])
  # def test_rwr_multi(self, seed, multiplex_flist, adj, expected_init_prob, expected_rwr_multi):
  #   adj_matrix = adj(multiplex_flist)
  #   M = column_norm(adj_matrix)
  #   L = 5
  #   r = 0.7
  #   p0 = expected_init_prob(seed, 5)
  #   p = random_walk_restart(M, p0, L, r)

  #   expected_p = expected_rwr_multi(seed)
  #   assert np.allclose(p, expected_p)

  @pytest.mark.parametrize("N,L", [(10, 1), (10,2), (30, 3)])
  def test_geometric_mean_bad_shape(self, N,L, random_prob_vector):
    X = random_prob_vector((N+1)*L)

    with pytest.raises(ValueError):
      _geometric_mean(X, N, L)

  @pytest.mark.parametrize("L",[1,2,3,4,5])
  @pytest.mark.parametrize("N",[10,15,20,100])
  def test_geometric_mean(self, L, N, random_prob_vector):
    X = random_prob_vector(N*L)
    mean = _geometric_mean(X, L, N)

    if L == 1:
      expected_mean = X
    else:
      expected_mean = np.zeros(N)
      for i in range(N):
        y = [X[i + l*N] for l in range(L)]
        expected_mean[i] = gmean(y)

    assert np.allclose(mean, expected_mean)

  @pytest.mark.parametrize("N,L", [(10, 1), (10,2), (30, 3)])
  def test_arithemtic_mean_bad_shape(self, N, L, random_prob_vector):
    X = random_prob_vector((N+1)*L)

    with pytest.raises(ValueError):
      _arithemtic_mean(X, N, L)

  @pytest.mark.parametrize("L",[1,2,3,4,5])
  @pytest.mark.parametrize("N",[10,15,20,100])
  def test_arithemtic_mean(self, L, N, random_prob_vector):
    X = random_prob_vector(N*L)
    mean = _arithemtic_mean(X, L, N)

    if L == 1:
      expected_mean = X
    else:
      expected_mean = np.zeros(N)
      for i in range(N):
        y = [X[i + l*N] for l in range(L)]
        expected_mean[i] = np.mean(y)

    assert np.allclose(mean, expected_mean)

  @pytest.mark.parametrize("N,L", [(10, 1), (10,2), (30, 3)])
  def test_sum_scores_bad_shape(self, N, L, random_prob_vector):
    X = random_prob_vector((N+1)*L)

    with pytest.raises(ValueError):
      _sum_scores(X, N, L)

  @pytest.mark.parametrize("L",[1,2,3,4,5])
  @pytest.mark.parametrize("N",[10,15,20,100])
  def test_sum_scores(self, L, N, random_prob_vector):
    X = random_prob_vector(N*L)
    mean = _sum_scores(X, L, N)

    if L == 1:
      expected_mean = X
    else:
      expected_mean = np.zeros(N)
      for i in range(N):
        y = [X[i + l*N] for l in range(L)]
        expected_mean[i] = sum(y)

    assert np.allclose(mean, expected_mean)

  @pytest.mark.parametrize("layer_idx", [1])
  def test_rwr_encoding_bad_seed(self, layer_idx, bad_seed, monoplex_flist, adj, nodelist):
    flist = monoplex_flist(layer_idx)
    adj_matrix = adj(flist)
    
    with pytest.raises(ValueError):
      rwr_encoding(bad_seed, adj_matrix, nodelist, 1)

  def test_rwr_encoding_bad_adj(self, good_seed, nodelist):
    adj_matrix = np.random.random((10,20))

    with pytest.raises(ValueError):
      rwr_encoding(good_seed, adj_matrix, nodelist, 1)

  @pytest.mark.parametrize("layer_idx", [1])
  def test_rwr_encoding_bad_mean_type(self, layer_idx, monoplex_flist, adj, nodelist):
    flist = monoplex_flist(layer_idx)
    adj_matrix = adj(flist)
    seed = 'G1'
    L = 1

    with pytest.raises(ValueError):
      rwr_encoding(seed, adj_matrix, nodelist, L, mean_type='Bad_mean')

  @pytest.mark.parametrize("layer_idx", [1,2,3,4,5])
  @pytest.mark.parametrize("seeds", ['G1','G2','G3','G4','G5','G6','G7','G8','G9','G10',['G1','G2','G3','G4','G5','G6','G7','G8','G9','G10']])
  @pytest.mark.parametrize("mean_type", [None, 'Geometric', 'Arithmetic', 'Sum'])
  def test_rwr_encoding_mono(self, layer_idx, seeds, monoplex_flist, adj, nodelist, mean_type, expected_rwr_mono):
    flist = monoplex_flist(layer_idx)
    adj_matrix = adj(flist)
    
    x = rwr_encoding(seeds, adj_matrix, nodelist, 1, mean_type=mean_type)
    
    if not isinstance(seeds, list):
      seeds = [seeds]
    expected_x = np.empty((10, len(seeds)))
    for j, seed in enumerate(seeds):
      expected_x[:,j] = expected_rwr_mono(seed, layer_idx)

    assert np.allclose(x, expected_x)
  
  @pytest.mark.parametrize("seeds", ['G1','G10','G2','G3','G4','G5','G6','G7','G8','G9', ['G1','G10','G2','G3','G4','G5','G6','G7','G8','G9']])
  @pytest.mark.parametrize("mean_type", ['Sum','Geometric','Arithmetic', None])
  def test_rwr_encoding_multi(self, seeds, multiplex_flist, adj, nodelist, mean_type, expected_rwr_multi):
    adj_matrix = adj(multiplex_flist)

    x = rwr_encoding(seeds,adj_matrix,nodelist,5,mean_type)
    if not isinstance(seeds, list):
      seeds = [seeds]
    
    if mean_type is None:
      expected_x = np.empty((50, len(seeds)))
    else:
      expected_x = np.empty((10, len(seeds)))

    for j, seed in enumerate(seeds):
      expected_x[:,j] = expected_rwr_multi(seed, mean_type)

    assert np.allclose(x, expected_x)